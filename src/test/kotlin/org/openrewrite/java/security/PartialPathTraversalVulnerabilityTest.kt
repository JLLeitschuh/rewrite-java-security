/*
 * Copyright 2022 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openrewrite.java.security

import org.junit.jupiter.api.Test
import org.openrewrite.test.RecipeSpec
import org.openrewrite.test.RewriteTest

@Suppress("RedundantSuppression")
class PartialPathTraversalVulnerabilityTest : RewriteTest {

    override fun defaults(spec: RecipeSpec) {
        spec.recipe(PartialPathTraversalVulnerability())
    }

    /**
     * [ESAPI Vulnerability Fix](https://github.com/ESAPI/esapi-java-legacy/commit/a0d67b75593878b1b6e39e2acc1773b3effedb2a)
     */
    @Test
    fun `ESAPI CVE-2022-23457 example`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `parentheses wrapped call chain`() = rewriteRun(
        java(
            """
            import java.io.File;

            @SuppressWarnings("RedundantSuppression")
            class A {
                @SuppressWarnings("ResultOfMethodCallIgnored")
                void foo(File dir, File parent) {
                    (dir.getCanonicalPath()).startsWith((parent.getCanonicalPath()));
                }
            }
            """,
            """
            import java.io.File;

            @SuppressWarnings("RedundantSuppression")
            class A {
                @SuppressWarnings("ResultOfMethodCallIgnored")
                void foo(File dir, File parent) {
                    dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath());
                }
            }
            """
        )
    )

    @Test
    fun `startsWith on String call`() = rewriteRun(
        java(
            """
            import java.io.File;

            class A {
                void foo(File dir, File parent) {
                    dir.getCanonicalPath();
                    if ("potato".startsWith(parent.getCanonicalPath())) {
                        System.out.println("Hello!");
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentPath = parent.getCanonicalPath();
                    if (!dir.getCanonicalPath().startsWith(parentPath)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentPath = parent.getCanonicalPath();
                    if (!dir.getCanonicalFile().toPath().startsWith(parentPath)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith concatenated string`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir) throws IOException {
                    if (!dir.getCanonicalPath().startsWith("/usr" + "/dir")) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir) throws IOException {
                    if (!dir.getCanonicalFile().toPath().startsWith("/usr" + "/dir")) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath as variable declaration`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String canonicalPath = dir.getCanonicalPath();
                    if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String canonicalPath = dir.getCanonicalPath();
                    if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath as variable declaration twice`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String canonicalPath = dir.getCanonicalPath();
                    if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                    String canonicalPath2 = dir.getCanonicalPath();
                    if (!canonicalPath2.startsWith(parent.getCanonicalPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String canonicalPath = dir.getCanonicalPath();
                    if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                    String canonicalPath2 = dir.getCanonicalPath();
                    if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath as variable declaration twice different order`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String canonicalPath = dir.getCanonicalPath();
                    String canonicalPath2 = dir.getCanonicalPath();
                    if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                    if (!canonicalPath2.startsWith(parent.getCanonicalPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String canonicalPath = dir.getCanonicalPath();
                    String canonicalPath2 = dir.getCanonicalPath();
                    if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                    if (!dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath as variable declaration from method call subject`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                File getChild() {
                    return null;
                }

                void foo(File parent) throws IOException {
                    String canonicalPath = getChild().getCanonicalPath();
                    if (!canonicalPath.startsWith(parent.getCanonicalPath())) {
                        throw new IOException("Invalid directory: " + getChild().getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                File getChild() {
                    return null;
                }

                void foo(File parent) throws IOException {
                    String canonicalPath = getChild().getCanonicalPath();
                    if (!getChild().getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())) {
                        throw new IOException("Invalid directory: " + getChild().getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string ending with File seperator`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath() + File.separator)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string ending with File seperatorChar`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath() + File.separatorChar)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string assigned to variable`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath();
                    if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath();
                    if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string assigned to variable twice`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath();
                    String parentCanonical2 = parent.getCanonicalPath();
                    if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                    if (!dir.getCanonicalPath().startsWith(parentCanonical2)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath();
                    String parentCanonical2 = parent.getCanonicalPath();
                    if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                    if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical2)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string ending with File seperatorChar assigned to variable`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                    if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string ending with static import of File seperatorChar assigned to variable`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;
            import static java.io.File.separatorChar;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath() + separatorChar;
                    if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string ending with File seperatorChar assigned to variable twice`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                    String parentCanonical2 = parent.getCanonicalPath() + File.separatorChar;
                    if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                    if (!dir.getCanonicalPath().startsWith(parentCanonical2)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string ending with File separator assigned to variable`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath() + File.separator;
                    if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string ending with File seperatorChar assigned to variable in if`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            @SuppressWarnings("RedundantSuppression")
            class A {
                @SuppressWarnings({
                    "IfStatementWithIdenticalBranches",
                    "MismatchedStringCase",
                    "UnusedAssignment",
                    "ResultOfMethodCallIgnored"
                })
                void foo(File dir, File parent, boolean branch) throws IOException {
                    String parentCanonical = null;
                    "test ".startsWith("somethingElse");
                    if (branch) {
                        parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                    } else {
                        parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                    }
                    if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string ending with File seperatorChar in only one branch of if`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent, boolean branch) throws IOException {
                    String parentCanonical = parent.getCanonicalPath();
                    if (branch) {
                        parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                    }
                    if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent, boolean branch) throws IOException {
                    String parentCanonical = parent.getCanonicalPath();
                    if (branch) {
                        parentCanonical = parent.getCanonicalPath() + File.separatorChar;
                    }
                    if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string ending with another string assigned to variable`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath() + "/potato";
                    if (!dir.getCanonicalPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath() + "/potato";
                    if (!dir.getCanonicalFile().toPath().startsWith(parentCanonical)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )

    @Test
    fun `keycloak example`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.FileInputStream;
            import java.io.InputStream;
            import java.nio.file.Files;

            class A {
                private File cacheDir;

                InputStream foo(String... path) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(cacheDir.getAbsolutePath());
                    for (String p : path) {
                        sb.append(File.separatorChar);
                        sb.append(p);
                    }
                    sb.append(".gz");

                    String filePath = sb.toString();
                    File encodedFile = new File(filePath);
                    try {
                        if (!encodedFile.getCanonicalPath().startsWith(cacheDir.getCanonicalPath())) {
                            return null;
                        }
                        return Files.newInputStream(encodedFile.toPath());
                    } catch (Exception e) {
                        return null;
                    }
                }
            }
            """,
            """
            import java.io.File;
            import java.io.FileInputStream;
            import java.io.InputStream;
            import java.nio.file.Files;

            class A {
                private File cacheDir;

                InputStream foo(String... path) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(cacheDir.getAbsolutePath());
                    for (String p : path) {
                        sb.append(File.separatorChar);
                        sb.append(p);
                    }
                    sb.append(".gz");

                    String filePath = sb.toString();
                    File encodedFile = new File(filePath);
                    try {
                        if (!encodedFile.getCanonicalFile().toPath().startsWith(cacheDir.getCanonicalFile().toPath())) {
                            return null;
                        }
                        return Files.newInputStream(encodedFile.toPath());
                    } catch (Exception e) {
                        return null;
                    }
                }
            }
            """
        )
    )

    @Test
    fun `getCanonicalPath startsWith string variable with File seperator appended`() = rewriteRun(
        java(
            """
            import java.io.File;
            import java.io.IOException;

            class A {
                void foo(File dir, File parent) throws IOException {
                    String parentCanonical = parent.getCanonicalPath();
                    if (!dir.getCanonicalPath().startsWith(parentCanonical + File.separator)) {
                        throw new IOException("Invalid directory: " + dir.getCanonicalPath());
                    }
                }
            }
            """
        )
    )
}
